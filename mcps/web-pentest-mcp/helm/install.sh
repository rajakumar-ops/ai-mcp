#!/bin/bash

# Web Penetration Testing MCP Server - Helm Installation Script
# This script provides easy installation and management of the MCP server

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
NAMESPACE="web-pentest-mcp"
RELEASE_NAME="web-pentest-mcp"
CHART_PATH="./helm/web-pentest-mcp"
VALUES_FILE=""
IMAGE_REPOSITORY=""
IMAGE_TAG="latest"
ENVIRONMENT="development"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS] COMMAND

Commands:
    install       Install the MCP server
    upgrade       Upgrade the MCP server
    uninstall     Uninstall the MCP server
    status        Show status of the MCP server
    logs          Show logs of the MCP server
    test          Test the MCP server

Options:
    -n, --namespace NAMESPACE     Kubernetes namespace (default: web-pentest-mcp)
    -r, --release RELEASE_NAME    Helm release name (default: web-pentest-mcp)
    -c, --chart CHART_PATH        Path to Helm chart (default: ./helm/web-pentest-mcp)
    -f, --values VALUES_FILE      Path to values file
    -i, --image IMAGE_REPOSITORY  Docker image repository
    -t, --tag IMAGE_TAG          Docker image tag (default: latest)
    -e, --env ENVIRONMENT        Environment (dev, staging, prod) (default: development)
    -h, --help                   Show this help message

Examples:
    # Install with default values
    $0 install

    # Install with custom values
    $0 install -f custom-values.yaml -i my-registry/web-pentest-mcp-server -t v1.0.0

    # Install for production
    $0 install -e prod -i my-registry/web-pentest-mcp-server -t v1.0.0

    # Upgrade existing installation
    $0 upgrade -f new-values.yaml

    # Check status
    $0 status

    # View logs
    $0 logs

    # Uninstall
    $0 uninstall
EOF
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if kubectl is installed
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl is not installed or not in PATH"
        exit 1
    fi
    
    # Check if helm is installed
    if ! command -v helm &> /dev/null; then
        print_error "helm is not installed or not in PATH"
        exit 1
    fi
    
    # Check if kubectl can connect to cluster
    if ! kubectl cluster-info &> /dev/null; then
        print_error "Cannot connect to Kubernetes cluster"
        exit 1
    fi
    
    # Check if helm is initialized
    if ! helm version &> /dev/null; then
        print_error "Helm is not initialized"
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Function to create namespace
create_namespace() {
    print_status "Creating namespace: $NAMESPACE"
    
    if kubectl get namespace "$NAMESPACE" &> /dev/null; then
        print_warning "Namespace $NAMESPACE already exists"
    else
        kubectl create namespace "$NAMESPACE"
        print_success "Namespace $NAMESPACE created"
    fi
}

# Function to install the chart
install_chart() {
    print_status "Installing MCP server..."
    
    # Build helm command
    local helm_cmd="helm install $RELEASE_NAME $CHART_PATH --namespace $NAMESPACE"
    
    # Add values file if specified
    if [ -n "$VALUES_FILE" ]; then
        helm_cmd="$helm_cmd -f $VALUES_FILE"
    fi
    
    # Add image repository if specified
    if [ -n "$IMAGE_REPOSITORY" ]; then
        helm_cmd="$helm_cmd --set image.repository=$IMAGE_REPOSITORY"
    fi
    
    # Add image tag if specified
    if [ -n "$IMAGE_TAG" ]; then
        helm_cmd="$helm_cmd --set image.tag=$IMAGE_TAG"
    fi
    
    # Add environment-specific values
    case $ENVIRONMENT in
        "dev"|"development")
            helm_cmd="$helm_cmd --set replicaCount=1 --set resources.requests.cpu=100m --set resources.requests.memory=256Mi"
            ;;
        "staging")
            helm_cmd="$helm_cmd --set replicaCount=2 --set ingress.enabled=true"
            ;;
        "prod"|"production")
            helm_cmd="$helm_cmd --set replicaCount=3 --set ingress.enabled=true --set monitoring.prometheus.enabled=true --set security.networkPolicy.enabled=true"
            ;;
    esac
    
    # Execute helm command
    print_status "Executing: $helm_cmd"
    eval $helm_cmd
    
    print_success "MCP server installed successfully"
}

# Function to upgrade the chart
upgrade_chart() {
    print_status "Upgrading MCP server..."
    
    # Build helm command
    local helm_cmd="helm upgrade $RELEASE_NAME $CHART_PATH --namespace $NAMESPACE"
    
    # Add values file if specified
    if [ -n "$VALUES_FILE" ]; then
        helm_cmd="$helm_cmd -f $VALUES_FILE"
    fi
    
    # Add image repository if specified
    if [ -n "$IMAGE_REPOSITORY" ]; then
        helm_cmd="$helm_cmd --set image.repository=$IMAGE_REPOSITORY"
    fi
    
    # Add image tag if specified
    if [ -n "$IMAGE_TAG" ]; then
        helm_cmd="$helm_cmd --set image.tag=$IMAGE_TAG"
    fi
    
    # Execute helm command
    print_status "Executing: $helm_cmd"
    eval $helm_cmd
    
    print_success "MCP server upgraded successfully"
}

# Function to uninstall the chart
uninstall_chart() {
    print_status "Uninstalling MCP server..."
    
    helm uninstall "$RELEASE_NAME" --namespace "$NAMESPACE"
    
    print_success "MCP server uninstalled successfully"
}

# Function to show status
show_status() {
    print_status "MCP server status:"
    
    echo ""
    echo "=== Helm Release ==="
    helm status "$RELEASE_NAME" --namespace "$NAMESPACE" || print_warning "Release not found"
    
    echo ""
    echo "=== Pods ==="
    kubectl get pods -n "$NAMESPACE" -l app.kubernetes.io/name=web-pentest-mcp
    
    echo ""
    echo "=== Services ==="
    kubectl get svc -n "$NAMESPACE" -l app.kubernetes.io/name=web-pentest-mcp
    
    echo ""
    echo "=== Ingress ==="
    kubectl get ingress -n "$NAMESPACE" -l app.kubernetes.io/name=web-pentest-mcp 2>/dev/null || print_warning "No ingress found"
}

# Function to show logs
show_logs() {
    print_status "MCP server logs:"
    
    kubectl logs -n "$NAMESPACE" -l app.kubernetes.io/name=web-pentest-mcp --tail=100 -f
}

# Function to test the server
test_server() {
    print_status "Testing MCP server..."
    
    # Get pod name
    local pod_name=$(kubectl get pods -n "$NAMESPACE" -l app.kubernetes.io/name=web-pentest-mcp -o jsonpath='{.items[0].metadata.name}')
    
    if [ -z "$pod_name" ]; then
        print_error "No pods found"
        exit 1
    fi
    
    # Test health endpoint
    print_status "Testing health endpoint..."
    kubectl exec -n "$NAMESPACE" "$pod_name" -- curl -f http://localhost:8080/health || print_warning "Health check failed"
    
    # Test MCP protocol
    print_status "Testing MCP protocol..."
    echo '{"jsonrpc":"2.0","method":"tools/list","id":1}' | kubectl exec -i -n "$NAMESPACE" "$pod_name" -- python3 web_pentest_server.py || print_warning "MCP protocol test failed"
    
    print_success "Testing completed"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--namespace)
            NAMESPACE="$2"
            shift 2
            ;;
        -r|--release)
            RELEASE_NAME="$2"
            shift 2
            ;;
        -c|--chart)
            CHART_PATH="$2"
            shift 2
            ;;
        -f|--values)
            VALUES_FILE="$2"
            shift 2
            ;;
        -i|--image)
            IMAGE_REPOSITORY="$2"
            shift 2
            ;;
        -t|--tag)
            IMAGE_TAG="$2"
            shift 2
            ;;
        -e|--env)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        install|upgrade|uninstall|status|logs|test)
            COMMAND="$1"
            shift
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Check if command is provided
if [ -z "$COMMAND" ]; then
    print_error "Command is required"
    show_usage
    exit 1
fi

# Execute command
case $COMMAND in
    "install")
        check_prerequisites
        create_namespace
        install_chart
        show_status
        ;;
    "upgrade")
        check_prerequisites
        upgrade_chart
        show_status
        ;;
    "uninstall")
        check_prerequisites
        uninstall_chart
        ;;
    "status")
        check_prerequisites
        show_status
        ;;
    "logs")
        check_prerequisites
        show_logs
        ;;
    "test")
        check_prerequisites
        test_server
        ;;
    *)
        print_error "Unknown command: $COMMAND"
        show_usage
        exit 1
        ;;
esac
