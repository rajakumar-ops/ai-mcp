# Example values files for different deployment scenarios

# =============================================================================
# DEVELOPMENT VALUES
# =============================================================================
# Use this for development environments
replicaCount: 1

image:
  repository: web-pentest-mcp-server
  tag: "dev"
  pullPolicy: Always

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

ingress:
  enabled: false

monitoring:
  prometheus:
    enabled: false
  healthCheck:
    enabled: true

security:
  networkPolicy:
    enabled: false

# =============================================================================
# STAGING VALUES
# =============================================================================
# Use this for staging environments
replicaCount: 2

image:
  repository: your-registry/web-pentest-mcp-server
  tag: "staging"
  pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

ingress:
  enabled: true
  className: "nginx"
  hosts:
    - host: web-pentest-mcp-staging.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: web-pentest-mcp-staging-tls
      hosts:
        - web-pentest-mcp-staging.yourdomain.com

monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
  serviceMonitor:
    enabled: true
  healthCheck:
    enabled: true

security:
  networkPolicy:
    enabled: true

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

# =============================================================================
# PRODUCTION VALUES
# =============================================================================
# Use this for production environments
replicaCount: 3

image:
  repository: your-registry/web-pentest-mcp-server
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 1000m
    memory: 1Gi

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: web-pentest-mcp.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: web-pentest-mcp-tls
      hosts:
        - web-pentest-mcp.yourdomain.com

monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
  healthCheck:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

security:
  networkPolicy:
    enabled: true
  podSecurityStandards:
    enabled: true

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

podDisruptionBudget:
  enabled: true
  minAvailable: 2

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - web-pentest-mcp
        topologyKey: kubernetes.io/hostname

# =============================================================================
# HIGH AVAILABILITY VALUES
# =============================================================================
# Use this for high availability deployments
replicaCount: 5

image:
  repository: your-registry/web-pentest-mcp-server
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 1000m
    memory: 1Gi

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
  hosts:
    - host: web-pentest-mcp.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: web-pentest-mcp-tls
      hosts:
        - web-pentest-mcp.yourdomain.com

monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
  serviceMonitor:
    enabled: true
  healthCheck:
    enabled: true

security:
  networkPolicy:
    enabled: true
  podSecurityStandards:
    enabled: true

autoscaling:
  enabled: true
  minReplicas: 5
  maxReplicas: 50
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 70

podDisruptionBudget:
  enabled: true
  minAvailable: 3

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - web-pentest-mcp
        topologyKey: kubernetes.io/hostname
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - web-pentest-mcp
          topologyKey: topology.kubernetes.io/zone

# =============================================================================
# MONITORING FOCUSED VALUES
# =============================================================================
# Use this when monitoring is the primary concern
replicaCount: 2

image:
  repository: your-registry/web-pentest-mcp-server
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
  serviceMonitor:
    enabled: true
    interval: 15s
    scrapeTimeout: 5s
    labels:
      monitoring: "enabled"
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9090"
      prometheus.io/path: "/metrics"
  podMonitor:
    enabled: true
    interval: 15s
    scrapeTimeout: 5s
  healthCheck:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 2

# =============================================================================
# SECURITY FOCUSED VALUES
# =============================================================================
# Use this when security is the primary concern
replicaCount: 2

image:
  repository: your-registry/web-pentest-mcp-server
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

security:
  networkPolicy:
    enabled: true
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                name: monitoring
        ports:
          - protocol: TCP
            port: 9090
      - from:
          - namespaceSelector:
              matchLabels:
                name: ingress-nginx
        ports:
          - protocol: TCP
            port: 8080
    egress:
      - to: []
        ports:
          - protocol: UDP
            port: 53
      - to: []
        ports:
          - protocol: TCP
            port: 80
          - protocol: TCP
            port: 443
  podSecurityStandards:
    enabled: true
  scc:
    enabled: true

podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    add:
      - NET_RAW
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

# =============================================================================
# RESOURCE CONSTRAINED VALUES
# =============================================================================
# Use this for resource-constrained environments
replicaCount: 1

image:
  repository: web-pentest-mcp-server
  tag: "latest"
  pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

ingress:
  enabled: false

monitoring:
  prometheus:
    enabled: false
  healthCheck:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

security:
  networkPolicy:
    enabled: false

# =============================================================================
# MULTI-ENVIRONMENT VALUES
# =============================================================================
# Use this as a base for multiple environments
# Override specific values per environment

# Common values
image:
  repository: your-registry/web-pentest-mcp-server
  pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

monitoring:
  prometheus:
    enabled: true
  healthCheck:
    enabled: true

security:
  networkPolicy:
    enabled: true

# Environment-specific overrides
# Development: --set image.tag=dev --set replicaCount=1
# Staging: --set image.tag=staging --set replicaCount=2
# Production: --set image.tag=v1.0.0 --set replicaCount=3
